// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"toko/cmd/interface/handler"
	"toko/cmd/interface/handler/health"
	"toko/cmd/interface/handler/product"
	"toko/cmd/interface/handler/user"
	"toko/config"
	"toko/infrastructure/database"
	"toko/internal/protocol/http"
	"toko/internal/protocol/http/router"
	"toko/pkg/auth"
)

// Injectors from injector.go:

func InitHttpProtocol(mode string) (*http.HttpImpl, error) {
	configConfig := config.NewConfig()
	databaseImpl := database.NewDatabaseClient(configConfig, mode)
	userRepositoryImpl, err := user.ProvideRepository(databaseImpl)
	if err != nil {
		return nil, err
	}
	jwtTokenImpl := auth.NewJwtToken()
	userServiceImpl, err := user.ProvideService(userRepositoryImpl, jwtTokenImpl)
	if err != nil {
		return nil, err
	}
	userHandlerImpl, err := user.ProvideHandler(userServiceImpl)
	if err != nil {
		return nil, err
	}
	productRepositoryImpl, err := product.ProvideRepository(databaseImpl)
	if err != nil {
		return nil, err
	}
	productServiceImpl, err := product.ProvideService(productRepositoryImpl, jwtTokenImpl)
	if err != nil {
		return nil, err
	}
	productHandlerImpl, err := product.ProvideHandler(productServiceImpl)
	if err != nil {
		return nil, err
	}
	healthHandlerImpl, err := health.ProvideHandler()
	if err != nil {
		return nil, err
	}
	httpHandlerImpl := handler.NewHttpHandler(userHandlerImpl, productHandlerImpl, healthHandlerImpl)
	httpRouterImpl := router.NewHttpRoute(httpHandlerImpl)
	httpImpl := http.NewHttpProtocol(httpRouterImpl, configConfig)
	return httpImpl, nil
}
